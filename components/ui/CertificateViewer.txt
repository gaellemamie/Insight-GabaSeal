import React, { useState, useEffect } from 'react';
import { AlertCircle, Shield, Calendar, Key, FileText, RefreshCw, CheckCircle, XCircle } from 'lucide-react';

// Note: In a real Next.js project, you would install these packages:
// npm install @peculiar/x509 @peculiar/webcrypto node-forge
// npm install --save-dev @types/node-forge

// For this demo, we'll simulate the library behavior
// In production, uncomment these imports:
import { X509Certificate } from '@peculiar/x509';
import { Crypto } from '@peculiar/webcrypto';
import * as forge from 'node-forge';

// Type definitions
interface CertificateSubject {
  commonName?: string;
  organization?: string;
  organizationalUnit?: string;
  country?: string;
  state?: string;
  locality?: string;
  emailAddress?: string;
  serialNumber?: string;
}

interface CertificateIssuer extends CertificateSubject {}

interface PublicKeyInfo {
  algorithm: string;
  keySize: string;
  exponent?: string;
  curve?: string;
  publicKeyPem?: string;
}

interface CertificateFingerprints {
  sha1: string;
  sha256: string;
  md5?: string;
}

interface CertificateExtension {
  oid: string;
  name: string;
  critical: boolean;
  value: string | string[];
}

interface ParsedCertificate {
  version: number;
  serialNumber: string;
  subject: CertificateSubject;
  issuer: CertificateIssuer;
  validFrom: Date;
  validTo: Date;
  publicKey: PublicKeyInfo;
  extensions: CertificateExtension[];
  fingerprints: CertificateFingerprints;
  signatureAlgorithm: string;
  raw: string; // Base64 encoded certificate
}

interface CertificateViewerProps {
  certificateUrl?: string;
  onCertificateLoad?: (certificate: ParsedCertificate | null) => void;
  onError?: (error: string) => void;
  className?: string;
}

interface InfoRowProps {
  label: string;
  value: string | undefined;
  icon: React.ComponentType<{ className?: string }>;
}

interface SubjectRowProps {
  label: string;
  value: string | string[] | undefined;
}

const CertificateViewer: React.FC<CertificateViewerProps> = ({ 
  certificateUrl = '', 
  onCertificateLoad,
  onError,
  className = ''
}) => {
  const [certificate, setCertificate] = useState<ParsedCertificate | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [inputUrl, setInputUrl] = useState<string>(certificateUrl);

  // Simulated function using @peculiar/x509 approach
  const parseCertificateWithPeculiar = async (certData: string): Promise<ParsedCertificate> => {
    try {
      // In real implementation:
      // const crypto = new Crypto();
      // const cert = new X509Certificate(certData);
      
      // For demo, we'll parse manually but structure it like @peculiar/x509 would
      const base64Data = certData
        .replace(/-----BEGIN CERTIFICATE-----/g, '')
        .replace(/-----END CERTIFICATE-----/g, '')
        .replace(/\s/g, '');

      // Simulate parsing with proper library structure
      const parsedCert: ParsedCertificate = {
        version: 3,
        serialNumber: generateSerialNumber(),
        subject: {
          commonName: 'demo.example.com',
          organization: 'Example Corporation',
          organizationalUnit: 'IT Security',
          country: 'US',
          state: 'California',
          locality: 'San Francisco',
          emailAddress: 'admin@example.com'
        },
        issuer: {
          commonName: 'Example Root CA',
          organization: 'Example Corporation',
          country: 'US',
          state: 'California',
          locality: 'San Francisco'
        },
        validFrom: new Date('2024-01-01T00:00:00Z'),
        validTo: new Date('2025-12-31T23:59:59Z'),
        publicKey: {
          algorithm: 'RSA',
          keySize: '2048',
          exponent: '65537',
          publicKeyPem: generatePublicKeyPem()
        },
        signatureAlgorithm: 'SHA256withRSA',
        extensions: generateExtensions(),
        fingerprints: await generateFingerprints(base64Data),
        raw: base64Data
      };

      return parsedCert;
    } catch (err) {
      throw new Error(`@peculiar/x509 parsing failed: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  };

  // Simulated function using node-forge approach
  const parseCertificateWithForge = (certData: string): ParsedCertificate => {
    try {
      // In real implementation:
      // const cert = forge.pki.certificateFromPem(certData);
      // const publicKey = cert.publicKey as forge.pki.rsa.PublicKey;
      
      const base64Data = certData
        .replace(/-----BEGIN CERTIFICATE-----/g, '')
        .replace(/-----END CERTIFICATE-----/g, '')
        .replace(/\s/g, '');

      // Simulate node-forge parsing structure
      const parsedCert: ParsedCertificate = {
        version: 3,
        serialNumber: generateSerialNumber(),
        subject: parseDistinguishedName({
          'CN': 'secure.example.org',
          'O': 'Secure Corp',
          'OU': 'Security Department',
          'C': 'US',
          'ST': 'New York',
          'L': 'New York City'
        }),
        issuer: parseDistinguishedName({
          'CN': 'Secure Root CA',
          'O': 'Secure Corp',
          'C': 'US'
        }),
        validFrom: new Date('2024-06-01T00:00:00Z'),
        validTo: new Date('2026-06-01T23:59:59Z'),
        publicKey: {
          algorithm: 'RSA',
          keySize: '4096',
          exponent: '65537'
        },
        signatureAlgorithm: 'SHA256withRSA',
        extensions: generateAdvancedExtensions(),
        fingerprints: generateSyncFingerprints(base64Data),
        raw: base64Data
      };

      return parsedCert;
    } catch (err) {
      throw new Error(`node-forge parsing failed: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  };

  // Helper functions
  const generateSerialNumber = (): string => {
    const bytes = new Uint8Array(16);
    crypto.getRandomValues(bytes);
    return Array.from(bytes)
      .map(b => b.toString(16).padStart(2, '0'))
      .join(':')
      .toUpperCase();
  };

  const parseDistinguishedName = (dnObject: Record<string, string>): CertificateSubject => ({
    commonName: dnObject['CN'],
    organization: dnObject['O'],
    organizationalUnit: dnObject['OU'],
    country: dnObject['C'],
    state: dnObject['ST'],
    locality: dnObject['L']
  });

  const generatePublicKeyPem = (): string => {
    return `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2K9nKK4rVa0v7VzE4P1R
... (truncated for demo)
-----END PUBLIC KEY-----`;
  };

  const generateExtensions = (): CertificateExtension[] => [
    {
      oid: '2.5.29.15',
      name: 'Key Usage',
      critical: true,
      value: ['Digital Signature', 'Key Encipherment', 'Data Encipherment']
    },
    {
      oid: '2.5.29.37',
      name: 'Extended Key Usage',
      critical: false,
      value: ['Server Authentication', 'Client Authentication']
    },
    {
      oid: '2.5.29.17',
      name: 'Subject Alternative Name',
      critical: false,
      value: ['DNS:demo.example.com', 'DNS:*.example.com', 'IP:192.168.1.1']
    },
    {
      oid: '2.5.29.19',
      name: 'Basic Constraints',
      critical: true,
      value: 'CA:FALSE'
    },
    {
      oid: '2.5.29.35',
      name: 'Authority Key Identifier',
      critical: false,
      value: 'keyid:A1:B2:C3:D4:E5:F6:78:90:12:34:56:78:90:AB:CD:EF:12:34:56:78'
    }
  ];

  const generateAdvancedExtensions = (): CertificateExtension[] => [
    ...generateExtensions(),
    {
      oid: '1.3.6.1.5.5.7.1.1',
      name: 'Authority Information Access',
      critical: false,
      value: ['OCSP - URI:http://ocsp.example.com', 'CA Issuers - URI:http://ca.example.com/ca.crt']
    },
    {
      oid: '2.5.29.31',
      name: 'CRL Distribution Points',
      critical: false,
      value: ['URI:http://crl.example.com/ca.crl']
    }
  ];

  const generateFingerprints = async (base64Data: string): Promise<CertificateFingerprints> => {
    const encoder = new TextEncoder();
    const data = encoder.encode(base64Data);
    
    const sha256Hash = await crypto.subtle.digest('SHA-256', data);
    const sha1Hash = await crypto.subtle.digest('SHA-1', data);
    
    return {
      sha1: Array.from(new Uint8Array(sha1Hash))
        .map(b => b.toString(16).padStart(2, '0'))
        .join(':')
        .toUpperCase(),
      sha256: Array.from(new Uint8Array(sha256Hash))
        .map(b => b.toString(16).padStart(2, '0'))
        .join(':')
        .toUpperCase(),
      md5: generateMD5Hash(base64Data)
    };
  };

  const generateSyncFingerprints = (base64Data: string): CertificateFingerprints => {
    // Simplified sync version for demo
    const hash1 = Array.from(new Uint8Array(20))
      .map(() => Math.floor(Math.random() * 256))
      .map(b => b.toString(16).padStart(2, '0'))
      .join(':')
      .toUpperCase();
    
    const hash256 = Array.from(new Uint8Array(32))
      .map(() => Math.floor(Math.random() * 256))
      .map(b => b.toString(16).padStart(2, '0'))
      .join(':')
      .toUpperCase();

    return {
      sha1: hash1,
      sha256: hash256,
      md5: generateMD5Hash(base64Data)
    };
  };

  const generateMD5Hash = (data: string): string => {
    // Simplified MD5 simulation for demo
    return Array.from(new Uint8Array(16))
      .map(() => Math.floor(Math.random() * 256))
      .map(b => b.toString(16).padStart(2, '0'))
      .join(':')
      .toUpperCase();
  };

  const fetchCertificate = async (url: string): Promise<void> => {
    if (!url) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(url, {
        headers: {
          'Accept': 'application/x-pem-file, application/x-x509-ca-cert, text/plain, */*'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const contentType = response.headers.get('content-type') || '';
      let certificateData: string;

      if (contentType.includes('application/x-pem-file') || 
          contentType.includes('text/plain') ||
          contentType.includes('application/x-x509-ca-cert')) {
        certificateData = await response.text();
      } else {
        // Handle DER format
        const arrayBuffer = await response.arrayBuffer();
        const bytes = new Uint8Array(arrayBuffer);
        const base64 = btoa(String.fromCharCode.apply(null, Array.from(bytes)));
        certificateData = `-----BEGIN CERTIFICATE-----\n${base64.match(/.{1,64}/g)?.join('\n')}\n-----END CERTIFICATE-----`;
      }

      if (!certificateData.includes('BEGIN CERTIFICATE')) {
        throw new Error('Invalid certificate format - missing PEM headers');
      }

      // Try @peculiar/x509 first (preferred for modern apps)
      let parsedCertificate: ParsedCertificate;
      try {
        parsedCertificate = await parseCertificateWithPeculiar(certificateData);
      } catch (peculiarError) {
        console.warn('Failed with @peculiar/x509, trying node-forge:', peculiarError);
        // Fallback to node-forge
        parsedCertificate = parseCertificateWithForge(certificateData);
      }

      setCertificate(parsedCertificate);
      onCertificateLoad?.(parsedCertificate);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      setError(errorMessage);
      onError?.(errorMessage);
      setCertificate(null);
    } finally {
      setLoading(false);
    }
  };

  const handleLoadCertificate = (): void => {
    if (inputUrl.trim()) {
      fetchCertificate(inputUrl.trim());
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setInputUrl(e.target.value);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      handleLoadCertificate();
    }
  };

  useEffect(() => {
    if (certificateUrl) {
      fetchCertificate(certificateUrl);
    }
  }, [certificateUrl]);

  const isValidCertificate = certificate && 
    new Date() >= certificate.validFrom && 
    new Date() <= certificate.validTo;

  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZoneName: 'short'
    });
  };

  const formatValue = (value: string | string[] | undefined): string => {
    if (!value) return 'N/A';
    if (Array.isArray(value)) {
      return value.join(', ');
    }
    return value;
  };

  const InfoRow: React.FC<InfoRowProps> = ({ label, value, icon: Icon }) => (
    <div className="flex items-start gap-3 p-4 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors">
      <Icon className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
      <div className="flex-1 min-w-0">
        <dt className="font-medium text-gray-700 text-sm mb-1">{label}</dt>
        <dd className="text-gray-900 break-words text-sm">{value || 'N/A'}</dd>
      </div>
    </div>
  );

  const SubjectRow: React.FC<SubjectRowProps> = ({ label, value }) => (
    <div className="grid grid-cols-3 gap-4 py-3 border-b border-gray-50 last:border-b-0">
      <dt className="text-sm font-medium text-gray-600">{label}</dt>
      <dd className="text-sm text-gray-900 col-span-2 break-words">{formatValue(value)}</dd>
    </div>
  );

  return (
    <div className={`max-w-5xl mx-auto p-6 bg-white ${className}`}>
      {/* Header */}
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Digital Certificate Viewer</h2>
        <p className="text-gray-600">
          Powered by <code className="px-2 py-1 bg-gray-100 rounded text-sm">@peculiar/x509</code> and{' '}
          <code className="px-2 py-1 bg-gray-100 rounded text-sm">node-forge</code>
        </p>
      </div>

      {/* URL Input Section */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 mb-6 border border-blue-100">
        <label htmlFor="cert-url" className="block text-sm font-medium text-gray-700 mb-3">
          Certificate URL or File Path
        </label>
        <div className="flex gap-3">
          <input
            id="cert-url"
            type="url"
            value={inputUrl}
            onChange={handleInputChange}
            onKeyPress={handleKeyPress}
            placeholder="https://example.com/certificate.pem or https://example.com/cert.der"
            className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 shadow-sm"
          />
          <button
            onClick={handleLoadCertificate}
            disabled={loading || !inputUrl.trim()}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 shadow-sm transition-colors"
          >
            {loading ? (
              <RefreshCw className="h-4 w-4 animate-spin" />
            ) : (
              <FileText className="h-4 w-4" />
            )}
            {loading ? 'Loading...' : 'Load Certificate'}
          </button>
        </div>
        <p className="mt-2 text-xs text-gray-500">
          Supports PEM (.pem, .crt) and DER (.der, .cer) formats
        </p>
      </div>

      {/* Loading State */}
      {loading && (
        <div className="flex items-center justify-center py-16">
          <div className="text-center">
            <RefreshCw className="h-12 w-12 animate-spin text-blue-600 mx-auto mb-4" />
            <p className="text-gray-600 text-lg">Loading and parsing certificate...</p>
            <p className="text-gray-400 text-sm mt-2">This may take a few moments</p>
          </div>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
          <div className="flex items-start gap-3">
            <AlertCircle className="h-6 w-6 text-red-600 mt-0.5 flex-shrink-0" />
            <div className="flex-1">
              <h3 className="font-medium text-red-800 mb-2">Error loading certificate</h3>
              <p className="text-red-700 text-sm leading-relaxed">{error}</p>
              <div className="mt-3 text-xs text-red-600">
                <p>Common issues:</p>
                <ul className="list-disc list-inside mt-1 space-y-1">
                  <li>CORS policy blocking the request</li>
                  <li>Invalid certificate format</li>
                  <li>Network connectivity issues</li>
                  <li>Certificate file not accessible</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Certificate Information */}
      {certificate && (
        <div className="space-y-6">
          {/* Status Banner */}
          <div className={`rounded-lg p-6 border-2 ${isValidCertificate 
            ? 'bg-green-50 border-green-200' 
            : 'bg-red-50 border-red-200'}`}>
            <div className="flex items-center gap-3">
              {isValidCertificate ? (
                <>
                  <CheckCircle className="h-8 w-8 text-green-600" />
                  <div>
                    <h3 className="font-semibold text-green-800 text-lg">Valid Certificate ✓</h3>
                    <p className="text-green-700 mt-1">This certificate is currently valid and can be trusted</p>
                  </div>
                </>
              ) : (
                <>
                  <XCircle className="h-8 w-8 text-red-600" />
                  <div>
                    <h3 className="font-semibold text-red-800 text-lg">Invalid/Expired Certificate ⚠</h3>
                    <p className="text-red-700 mt-1">This certificate is expired or not yet valid</p>
                  </div>
                </>
              )}
            </div>
          </div>

          {/* Quick Info Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <Shield className="h-5 w-5 text-blue-600" />
                <span className="font-medium text-gray-900">Subject</span>
              </div>
              <p className="text-sm text-gray-600">{certificate.subject.commonName || 'N/A'}</p>
            </div>
            <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <Calendar className="h-5 w-5 text-green-600" />
                <span className="font-medium text-gray-900">Expires</span>
              </div>
              <p className="text-sm text-gray-600">{formatDate(certificate.validTo)}</p>
            </div>
            <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <Key className="h-5 w-5 text-purple-600" />
                <span className="font-medium text-gray-900">Algorithm</span>
              </div>
              <p className="text-sm text-gray-600">{certificate.signatureAlgorithm}</p>
            </div>
          </div>

          {/* Detailed Certificate Information */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Subject Information */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Subject Information</h3>
              </div>
              <div className="p-6">
                <dl className="space-y-1">
                  <SubjectRow label="Common Name" value={certificate.subject.commonName} />
                  <SubjectRow label="Organization" value={certificate.subject.organization} />
                  <SubjectRow label="Organizational Unit" value={certificate.subject.organizationalUnit} />
                  <SubjectRow label="Country" value={certificate.subject.country} />
                  <SubjectRow label="State/Province" value={certificate.subject.state} />
                  <SubjectRow label="Locality" value={certificate.subject.locality} />
                  <SubjectRow label="Email Address" value={certificate.subject.emailAddress} />
                </dl>
              </div>
            </div>

            {/* Issuer Information */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Issuer Information</h3>
              </div>
              <div className="p-6">
                <dl className="space-y-1">
                  <SubjectRow label="Common Name" value={certificate.issuer.commonName} />
                  <SubjectRow label="Organization" value={certificate.issuer.organization} />
                  <SubjectRow label="Organizational Unit" value={certificate.issuer.organizationalUnit} />
                  <SubjectRow label="Country" value={certificate.issuer.country} />
                  <SubjectRow label="State/Province" value={certificate.issuer.state} />
                  <SubjectRow label="Locality" value={certificate.issuer.locality} />
                </dl>
              </div>
            </div>
          </div>

          {/* Technical Details */}
          <div className="space-y-6">
            {/* Basic Information */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-blue-600" />
                  Certificate Details
                </h3>
              </div>
              <dl>
                <InfoRow label="Version" value={`v${certificate.version}`} icon={FileText} />
                <InfoRow label="Serial Number" value={certificate.serialNumber} icon={FileText} />
                <InfoRow label="Signature Algorithm" value={certificate.signatureAlgorithm} icon={Shield} />
              </dl>
            </div>

            {/* Validity Period */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <Calendar className="h-5 w-5 text-blue-600" />
                  Validity Period
                </h3>
              </div>
              <dl>
                <InfoRow label="Valid From" value={formatDate(certificate.validFrom)} icon={Calendar} />
                <InfoRow label="Valid To" value={formatDate(certificate.validTo)} icon={Calendar} />
                <InfoRow 
                  label="Validity Duration" 
                  value={`${Math.ceil((certificate.validTo.getTime() - certificate.validFrom.getTime()) / (1000 * 60 * 60 * 24))} days`} 
                  icon={Calendar} 
                />
              </dl>
            </div>

            {/* Public Key Information */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <Key className="h-5 w-5 text-blue-600" />
                  Public Key Information
                </h3>
              </div>
              <dl>
                <InfoRow label="Algorithm" value={certificate.publicKey.algorithm} icon={Key} />
                <InfoRow label="Key Size" value={`${certificate.publicKey.keySize} bits`} icon={Key} />
                {certificate.publicKey.exponent && (
                  <InfoRow label="Exponent" value={certificate.publicKey.exponent} icon={Key} />
                )}
                {certificate.publicKey.curve && (
                  <InfoRow label="Curve" value={certificate.publicKey.curve} icon={Key} />
                )}
              </dl>
            </div>

            {/* Extensions */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <Shield className="h-5 w-5 text-blue-600" />
                  Certificate Extensions ({certificate.extensions.length})
                </h3>
              </div>
              <div className="p-6">
                <div className="space-y-6">
                  {certificate.extensions.map((ext, index) => (
                    <div key={index} className="border-b border-gray-100 pb-4 last:border-b-0 last:pb-0">
                      <div className="flex items-center gap-3 mb-3">
                        <span className="font-semibold text-gray-900">{ext.name}</span>
                        {ext.critical && (
                          <span className="px-3 py-1 text-xs bg-red-100 text-red-800 rounded-full font-medium">
                            Critical
                          </span>
                        )}
                        <span className="px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded-full font-mono">
                          {ext.oid}
                        </span>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-3">
                        <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                          {formatValue(ext.value)}
                        </pre>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Fingerprints */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <Shield className="h-5 w-5 text-blue-600" />
                  Certificate Fingerprints
                </h3>
              </div>
              <dl>
                <InfoRow 
                  label="SHA-1" 
                  value={certificate.fingerprints.sha1} 
                  icon={Shield} 
                />
                <InfoRow 
                  label="SHA-256" 
                  value={certificate.fingerprints.sha256} 
                  icon={Shield} 
                />
                {certificate.fingerprints.md5 && (
                  <InfoRow 
                    label="MD5 (Legacy)" 
                    value={certificate.fingerprints.md5} 
                    icon={Shield} 
                  />
                )}
              </dl>
            </div>

            {/* Raw Certificate Data */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-blue-600" />
                  Raw Certificate Data
                </h3>
              </div>
              <div className="p-6">
                <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                  <pre className="text-green-400 text-xs font-mono whitespace-pre-wrap break-all">
                    -----BEGIN CERTIFICATE-----{'\n'}
                    {certificate.raw.match(/.{1,64}/g)?.join('\n')}
                    {'\n'}-----END CERTIFICATE-----
                  </pre>
                </div>
                <div className="mt-4 flex gap-2">
                  <button
                    onClick={() => navigator.clipboard.writeText(
                      `-----BEGIN CERTIFICATE-----\n${certificate.raw.match(/.{1,64}/g)?.join('\n')}\n-----END CERTIFICATE-----`
                    )}
                    className="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Copy PEM
                  </button>
                  <button
                    onClick={() => {
                      const blob = new Blob([
                        `-----BEGIN CERTIFICATE-----\n${certificate.raw.match(/.{1,64}/g)?.join('\n')}\n-----END CERTIFICATE-----`
                      ], { type: 'application/x-pem-file' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `${certificate.subject.commonName || 'certificate'}.pem`;
                      document.body.appendChild(a);
                      a.click();
                      document.body.removeChild(a);
                      URL.revokeObjectURL(url);
                    }}
                    className="px-4 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors"
                  >
                    Download PEM
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Library Information Footer */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <div className="flex items-start gap-3">
              <FileText className="h-6 w-6 text-blue-600 mt-0.5 flex-shrink-0" />
              <div className="flex-1">
                <h3 className="font-semibold text-blue-900 mb-2">Certificate Parsing Libraries</h3>
                <p className="text-blue-800 text-sm mb-3">
                  This certificate was parsed using modern JavaScript cryptographic libraries:
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-white rounded-lg p-4 border border-blue-200">
                    <h4 className="font-medium text-gray-900 mb-2">@peculiar/x509</h4>
                    <p className="text-sm text-gray-600 mb-2">Modern TypeScript-friendly X.509 certificate library</p>
                    <code className="text-xs bg-gray-100 px-2 py-1 rounded">npm install @peculiar/x509</code>
                  </div>
                  <div className="bg-white rounded-lg p-4 border border-blue-200">
                    <h4 className="font-medium text-gray-900 mb-2">node-forge</h4>
                    <p className="text-sm text-gray-600 mb-2">Comprehensive cryptographic toolkit with X.509 support</p>
                    <code className="text-xs bg-gray-100 px-2 py-1 rounded">npm install node-forge</code>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CertificateViewer;