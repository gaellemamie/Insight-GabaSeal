
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  type: 'type',
  status: 'status',
  image: 'image',
  certificateUrl: 'certificateUrl',
  signImageUrl: 'signImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  accessTokenExpires: 'accessTokenExpires'
};

exports.Prisma.InstitutionCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  location: 'location',
  address: 'address',
  logoUrl: 'logoUrl',
  verifiedBy: 'verifiedBy',
  field: 'field',
  categoryId: 'categoryId',
  status: 'status',
  serviceType: 'serviceType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeRoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  signingMark: 'signingMark',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  departmentId: 'departmentId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  role: 'role',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  employeeRoleId: 'employeeRoleId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  status: 'status',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AdminActivityLogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  path: 'path',
  module: 'module',
  entityId: 'entityId',
  entityName: 'entityName',
  signature: 'signature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  adminId: 'adminId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  status: 'status',
  senderId: 'senderId',
  receiverId: 'receiverId',
  documentId: 'documentId',
  replyToId: 'replyToId',
  conversationId: 'conversationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  url: 'url',
  fileName: 'fileName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  size: 'size',
  messageId: 'messageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  status: 'status',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  participants: 'participants'
};

exports.Prisma.MessageMentionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  actionByUserId: 'actionByUserId',
  actionOnUserId: 'actionOnUserId',
  userIp: 'userIp',
  userAgent: 'userAgent',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  changes: 'changes',
  description: 'description',
  success: 'success',
  createdAt: 'createdAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  severity: 'severity',
  audience: 'audience',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReminderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dueAt: 'dueAt',
  repeatInterval: 'repeatInterval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  type: 'type',
  importance: 'importance',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeekerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  name: 'name',
  email: 'email',
  phone: 'phone',
  location: 'location',
  dob: 'dob',
  gender: 'gender',
  nationalId: 'nationalId',
  institutions: 'institutions',
  userId: 'userId'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seekerId: 'seekerId'
};

exports.Prisma.DocumentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  formats: 'formats',
  institutionId: 'institutionId',
  templateUrl: 'templateUrl',
  signingMarkers: 'signingMarkers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  seekerId: 'seekerId',
  signedBy: 'signedBy',
  unSignedBy: 'unSignedBy',
  groupName: 'groupName',
  certificationStatus: 'certificationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  documentTypeId: 'documentTypeId'
};

exports.Prisma.DocumentRequestScalarFieldEnum = {
  id: 'id',
  description: 'description',
  documentUrl: 'documentUrl',
  seekerId: 'seekerId',
  status: 'status',
  documentTypeId: 'documentTypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  url: 'url',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EUserType = exports.$Enums.EUserType = {
  ADMIN: 'ADMIN',
  EMPLOYEE: 'EMPLOYEE',
  SEEKER: 'SEEKER'
};

exports.EStatus = exports.$Enums.EStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.EServiceType = exports.$Enums.EServiceType = {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC'
};

exports.EEmployeeRoleType = exports.$Enums.EEmployeeRoleType = {
  ADMIN: 'ADMIN',
  EMPLOYEE: 'EMPLOYEE',
  EDITOR: 'EDITOR',
  SIGNER: 'SIGNER'
};

exports.EAdminRole = exports.$Enums.EAdminRole = {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.EAdminActivityType = exports.$Enums.EAdminActivityType = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_RESET: 'PASSWORD_RESET',
  DELETE: 'DELETE',
  CREATE: 'CREATE',
  UPDATE: 'UPDATE'
};

exports.EMessageType = exports.$Enums.EMessageType = {
  CHAT: 'CHAT',
  COMMENT: 'COMMENT',
  SYSTEM: 'SYSTEM',
  DOCUMENT_DISCUSSION: 'DOCUMENT_DISCUSSION',
  DOCUMENT_COMMENT: 'DOCUMENT_COMMENT',
  DOCUMENT_REPLY: 'DOCUMENT_REPLY'
};

exports.EMessageStatus = exports.$Enums.EMessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  SEEN: 'SEEN',
  FAILED: 'FAILED',
  DELETED: 'DELETED',
  PENDING: 'PENDING',
  DRAFT: 'DRAFT'
};

exports.EConversationType = exports.$Enums.EConversationType = {
  PRIVATE: 'PRIVATE',
  GROUP: 'GROUP',
  DOCUMENT: 'DOCUMENT',
  TASK: 'TASK'
};

exports.ELogType = exports.$Enums.ELogType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  VIEW: 'VIEW',
  DOWNLOAD: 'DOWNLOAD',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PERMISSION_DENIED: 'PERMISSION_DENIED',
  SIGN: 'SIGN',
  VERIFY: 'VERIFY',
  FAIL: 'FAIL'
};

exports.EAlertSeverity = exports.$Enums.EAlertSeverity = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

exports.EAlertyAudience = exports.$Enums.EAlertyAudience = {
  ALL: 'ALL',
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ENotificationType = exports.$Enums.ENotificationType = {
  ALERT: 'ALERT',
  REMINDER: 'REMINDER',
  NOTIFICATION: 'NOTIFICATION',
  SYSTEM: 'SYSTEM',
  ACTION_REQUIRED: 'ACTION_REQUIRED'
};

exports.EnotificationImportance = exports.$Enums.EnotificationImportance = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ESeekerType = exports.$Enums.ESeekerType = {
  RESIDENT: 'RESIDENT',
  STUDENT: 'STUDENT',
  PROFESSIONAL: 'PROFESSIONAL',
  OTHER: 'OTHER'
};

exports.EGender = exports.$Enums.EGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.EServiceRequestStatus = exports.$Enums.EServiceRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ECertificationStatus = exports.$Enums.ECertificationStatus = {
  UNCERTIFIED: 'UNCERTIFIED',
  CERTIFIED: 'CERTIFIED'
};

exports.EDocumentRequestStatus = exports.$Enums.EDocumentRequestStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PasswordResetToken: 'PasswordResetToken',
  Account: 'Account',
  InstitutionCategory: 'InstitutionCategory',
  institution: 'institution',
  Department: 'Department',
  EmployeeRole: 'EmployeeRole',
  Employee: 'Employee',
  Admin: 'Admin',
  AdminActivityLog: 'AdminActivityLog',
  Message: 'Message',
  Attachment: 'Attachment',
  Conversation: 'Conversation',
  MessageMention: 'MessageMention',
  Log: 'Log',
  Alert: 'Alert',
  Reminder: 'Reminder',
  Notification: 'Notification',
  Seeker: 'Seeker',
  ServiceRequest: 'ServiceRequest',
  DocumentType: 'DocumentType',
  Document: 'Document',
  DocumentRequest: 'DocumentRequest',
  Certificate: 'Certificate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
